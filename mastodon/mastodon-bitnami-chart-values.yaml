## Mastodon Bitnami chart values
## @section Mastodon common parameters
##
## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - infinity

## @param adminUser Mastodon admin username
## [REQUIRED]
adminUser: ""
## @param adminEmail Mastodon admin email
## [REQUIRED]
adminEmail: ""
## @param adminPassword Mastodon admin password
## [REQUIRED]
adminPassword: ""

## @param enableSearches Enable the search engine (uses Elasticsearch under the hood)
##
enableSearches: true

## @param enableS3 Enable the S3 storage engine
##
enableS3: true

## @param webDomain Web domain for Mastodon
## [REQUIRED]
webDomain: ""

## @section Mastodon Web Parameters
##
web:
  ## @param web.replicaCount Number of Mastodon web replicas to deploy
  ##
  replicaCount: 1


  ## Scheduling the Mastodon Web component Pods on a dedicated node pool 
  ## (assumes the node pool was tagged using mastodon-web)
  nodeAffinityPreset:
    type: "hard"
    key: "doks.digitalocean.com/node-pool"
    values:
      - "mastodon-web"  

## @section Mastodon Sidekiq Parameters
##
sidekiq:
  ## @param sidekiq.replicaCount Number of Mastodon sidekiq replicas to deploy
  ##
  replicaCount: 1


  ## Scheduling the Mastodon Sidekiq component Pods on a dedicated node pool 
  ## (assumes the node pool was tagged using mastodon-sidekiq)
  nodeAffinityPreset:
    type: "hard"
    key: "doks.digitalocean.com/node-pool"
    values:
      - "mastodon-sidekiq"  

## @section Mastodon Streaming Parameters
##
streaming:
  ## @param streaming.replicaCount Number of Mastodon streaming replicas to deploy
  ##
  replicaCount: 1
  ## Scheduling the Mastodon Streaming component Pods on a dedicated node pool 
  ## (assumes the node pool was tagged using mastodon-streaming)
  nodeAffinityPreset:
    type: "hard"
    key: "doks.digitalocean.com/node-pool"
    values:
      - "mastodon-streaming"    

## @section External PostgreSQL configuration
##
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for JupyterHub
## @param externalDatabase.password Password for the non-root username for JupyterHub
## @param externalDatabase.database JupyterHub database name
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
##
externalDatabase:
  # host:  pg-mastodon-do-user-xxxxxxx-0.b.db.ondigitalocean.com
  host: "[REQUIRED]"
  port: 25060
  user: doadmin
  database: defaultdb
  password: ""
  existingSecret: "mastodon-creds"
  existingSecretPasswordKey: "postgres-password"


## @section External S3 parameters
## All of these values are only used when redis.enabled is set to false
## @param externalS3.host External S3 host
## @param externalS3.port External S3 port number
## @param externalS3.accessKeyID External S3 access key ID
## @param externalS3.accessKeySecret External S3 access key secret
## @param externalS3.existingSecret Name of an existing secret resource containing the S3 credentials
## @param externalS3.existingSecretAccessKeyIDKey Name of an existing secret key containing the S3 access key ID
## @param externalS3.existingSecretKeySecretKey Name of an existing secret key containing the S3 access key secret
## @param externalS3.protocol External S3 protocol
## @param externalS3.bucket External S3 bucket
## @param externalS3.region External S3 region
##
externalS3:
  # S3 endpoint [REQUIRED]
  # Edit the fields as per your configuration
  host: "ams3.digitaloceanspaces.com" # as per your configuration
  port: 443
  accessKeyID: ""
  accessKeySecret: ""
  existingSecret: "mastodon-creds"
  existingSecretAccessKeyIDKey: "AWS_ACCESS_KEY_ID"
  existingSecretKeySecretKey: "AWS_SECRET_ACCESS_KEY"
  protocol: "https"
  bucket: "[REQUIRED]"
  region: "ams3" # as per your configuration

## @section Redis sub-chart parameters
##
redis:
  ## @param redis.enabled Deploy Redis subchart
  ##
  enabled: true
  ## @param redis.architecture Set Redis architecture
  ##
  architecture: standalone
  ## @param redis.existingSecret Name of a secret containing redis credentials
  ##
  existingSecret: "mastodon-redis"
  ## @param redis.master.service.ports.redis Redis port
  ##
  master:
    service:
      ports:
        redis: 6379

  ## @param redis.auth.enabled Enable Redis auth
  ## @param redis.auth.password Redis password
  ## @param redis.auth.existingSecret Name of a secret containing the Redis password
  ##
  auth:
    enabled: true
    password: ""
    existingSecret: "mastodon-redis"

## @section PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
postgresql:
  enabled: false

## @section Elasticsearch chart configuration
## https://github.com/bitnami/charts/blob/main/bitnami/elasticsearch/values.yaml
##
elasticsearch:
  ## @param elasticsearch.enabled Whether to deploy a elasticsearch server to use as Mastodon's search engine
  ## To use an external server set this to false and configure the externalElasticsearch parameters
  ##
  enabled: true

## MinIO chart parameters
## For full list of MinIO values configurations please refer to https://github.com/bitnami/charts/tree/main/bitnami/minio
##
minio:
  ## Enable/disable MinIO chart installation
  ## to be used as an objstore for Mastodon
  ##
  enabled: false  

## Apache chart configuration
##
apache:
  ## Enable Apache chart
  ##
  enabled: false  
